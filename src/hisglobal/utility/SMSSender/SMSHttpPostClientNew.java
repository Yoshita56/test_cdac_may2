package hisglobal.utility.SMSSender;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.security.KeyManagementException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.ResourceBundle;
import java.util.StringTokenizer;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import javax.sql.rowset.WebRowSet;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import hisglobal.transactionmgnt.HisDAO;
import hisglobal.utility.HisUtil;

public class SMSHttpPostClientNew {

	/**
	 * Send Single text SMS
	 * @param username : Department Login User Name
	 * @param password : Department Login Password
	 * @param message  : Message e.g. 'Welcome to mobile Seva'
	 * @param senderId	: Department allocated SenderID
	 * @param mobileNumber : Single Mobile Number e.g. '99XXXXXXX' 
	 * @param secureKey :  Department key generated by login to services portal
	 * @return {@link String} response from Mobile Seva Gateway e.g. '402,MsgID = 150620161466003974245msdgsms' 
	 * @see <a href="https://mgov.gov.in/msdp_sms_push.jsp">Return types code details</a>
	 * 
	 */
	
	public static final int SMS_SENT_SUCCESSFULLY = 1;
	public static final int ERROR_NO_NUMBER = 2;	
	public static final int ERROR_SMS_SENT = 3;
	public static final int ERROR_NO_STORE = 4;
	public static final int ERROR_NO_MESSAGE = 5;
	
	public static int sendSMS (String mobileNumber,String templateid,String varText) {
		HisDAO daoObj = null;
		WebRowSet ws = null;
		String hospcode =HisUtil.getParameterFromHisPathXML("HOSPITAL_CODE");
		String strProcName = "{call pkg_bill_sms.proc_gblt_sms_mst(?,?,?,?)}";
		int nProcIndex = 0;
		String strErr = "";
		String username = "";
		String password = "";
		String senderId = "";
		String secureKey ="";
		String url ="";
		String Tlsversion="";
		try 
		{
			if (mobileNumber == null || mobileNumber.equals(""))
			return ERROR_NO_NUMBER;
			if (templateid == null || templateid.isEmpty())
			return ERROR_NO_MESSAGE;
		
			ResourceBundle r = ResourceBundle.getBundle("hisglobal.utility.SMSSender.sms");
			url=r.getString("url");
			senderId=r.getString("senderId");
			username=r.getString("username");
			password=r.getString("password");						
			secureKey=r.getString("secureKey");
		
			//String response = sendSingleSMSNew(url,username,password,senderId,mobileNumber,secureKey,templateid,Tlsversion,hospcode,varText);
			System.out.println("SMS Sent to Mobile " + mobileNumber + ", Response = ");
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}        
		return SMS_SENT_SUCCESSFULLY;
	}
		
	public static int sendSMS (String mobileNumber,String varText,String templateid,String hospCode) {
		HisDAO daoObj = null;
		WebRowSet ws = null;
		String hospcode =HisUtil.getParameterFromHisPathXML("HOSPITAL_CODE");
		String strProcName = "{call pkg_ipd_view.proc_gblt_sms_mst(?,?,?,?)}";
		int nProcIndex = 0;
		String strErr = "";
		String username = "";
		String password = "";
		String senderId = "";
		String secureKey ="";
		String url ="";
		String Tlsversion="";
		try 
		{
			if (mobileNumber == null || mobileNumber.equals(""))
			return ERROR_NO_NUMBER;
			if (templateid == null || templateid.isEmpty())
			return ERROR_NO_MESSAGE;
		
			if(hospCode.equals("99912"))
			{
				if(templateid.equals("32"))
				{
					String response = sendSingleSMSBillRB(mobileNumber,templateid,hospcode,varText);	
					System.out.println("SMS Sent to Mobile " + mobileNumber + ", Response = " + response);
				}
				else if(templateid.equals("33"))
				{
					String response = sendSingleSMSADTRB(mobileNumber,templateid,hospcode,varText);	
					System.out.println("SMS Sent to Mobile " + mobileNumber + ", Response = " + response);
				}
				else {
					String response = sendSingleSMSADTRB(mobileNumber,templateid,hospcode,varText);
					System.out.println("SMS Sent to Mobile " + mobileNumber + ", Response = " + response);
				}
			}
			else if(hospCode.equals("37913")||hospCode.equals("98926"))
			{
				if(templateid.equals("34"))
				{
					String response = sendSingleSMSJDH(mobileNumber,varText);	
					System.out.println("SMS Sent to Mobile For Hosp_code-"+hospCode+"--" + mobileNumber + ", Response = " + response);
				}
				
			}
			else
			{
			ResourceBundle r = ResourceBundle.getBundle("hisglobal.utility.SMSSender.sms");
			url=r.getString("url");
			senderId=r.getString("senderId");
			username=r.getString("username");
			password=r.getString("password");						
			secureKey=r.getString("secureKey");
			if(templateid.equals("32"))
			{
				String response = sendSingleSMSNewBILL(url,username,password,senderId,mobileNumber,secureKey,templateid,Tlsversion,hospcode,varText);
				System.out.println("SMS Sent to Mobile " + mobileNumber + ", Response = " + response);
			}
			else
			{
				String response = sendSingleSMSNewADT(url,username,password,senderId,mobileNumber,secureKey,templateid,Tlsversion,hospcode,varText);
				System.out.println("SMS Sent to Mobile " + mobileNumber + ", Response = " + response);
			}
			}
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}        
		return SMS_SENT_SUCCESSFULLY;
	}
	
	public static String sendSingleSMSBillRB(String mobileNumber,String templateid,String hospcode,String varText)
		{
			String strErr = "";
			StringBuilder response = new StringBuilder();
			HisUtil hisUtil = null;
			try {
				hisUtil = new HisUtil("SMS", "BILLINGSMS");
				String msg="Dear Patient, Payment of Rs."+varText.replace("^","#").split("#")[1]+" received against Bill No. "+varText.replace("^","#").split("#")[2]+" on "+hisUtil.getDSDate("")+" "+hisUtil.getDSDate("hh:mi:ss:AM")+". AIIMS Raebareli";
				System.out.println(msg);
				String url = "http://103.234.185.173/api/swsendnk.asp";
	            URL obj = new URL(url);
	            HttpURLConnection con = (HttpURLConnection) obj.openConnection();
	            
	            // set request method to POST
	            con.setRequestMethod("POST");
	            
	            // set request parameters
	            String urlParameters = "username=AIIMSRBL&pass=85957886&sender=AIMSPC&sendto="+mobileNumber+"&templateID=1407168689507264648&message="+msg;
	            //1407167480037624244
	            // send post request
	            con.setDoOutput(true);
	            DataOutputStream wr = new DataOutputStream(con.getOutputStream());
	            wr.writeBytes(urlParameters);
	            wr.flush();
	            wr.close();
	            
	            // get response code
	            int responseCode = con.getResponseCode();
	            System.out.println("Response Code: " + responseCode);
	            
	            // get response data
	            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
	            String inputLine;
	            
	            while ((inputLine = in.readLine()) != null) {
	                response.append(inputLine);
	            }
	            in.close();
	            
	            // print response
	            System.out.println(response.toString());
			    }catch (UnsupportedEncodingException e) {
			            e.printStackTrace();
			    } catch (ClientProtocolException e) {
			            e.printStackTrace();
			    } catch (IOException e) {
			            e.printStackTrace();
			    } catch (Exception e) {
		            e.printStackTrace();
		        }
		
	   return response.toString();
}
	
	public static String sendSingleSMSADTRB(String mobileNumber,String templateid,String hospcode,String varText)
		{
		String strErr = "";
		StringBuilder response = new StringBuilder();
		HisUtil hisUtil = null;
		try {
			hisUtil = new HisUtil("SMS", "BILLINGSMS");
			String msg=""; String templateID="";
			if(templateid.equals("33"))
			{
				msg="Dear Patient, You are discharged from "+varText.replace("^","#").split("#")[0]+" Department with UHID/CR No. "+varText.replace("^","#").split("#")[1]+". We wish you good health. AIIMS Raebareli";	
				templateID="1407168689627196137";
			}
			else {
				msg="Dear Patient, IPD No. "+varText.replace("^","#").split("#")[1]+" generated for your admission to IPD "+varText.replace("^","#").split("#")[2]+" on "+hisUtil.getDSDate("")+" "+hisUtil.getDSDate("hh:mi:ss:AM")+". AIIMS Raebareli";
				templateID="1407168689586940543";
			}
			
			System.out.println(msg);
			String url = "http://103.234.185.173/api/swsendnk.asp";
            URL obj = new URL(url);
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();
            
            // set request method to POST
            con.setRequestMethod("POST");
            
            // set request parameters
            String urlParameters = "username=AIIMSRBL&pass=85957886&sender=AIMSPC&sendto="+mobileNumber+"&templateID="+templateID+"&message="+msg;
            //1407167480047504972
            // send post request
            con.setDoOutput(true);
            DataOutputStream wr = new DataOutputStream(con.getOutputStream());
            wr.writeBytes(urlParameters);
            wr.flush();
            wr.close();
            
            // get response code
            int responseCode = con.getResponseCode();
            System.out.println("Response Code: " + responseCode);
            
            // get response data
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();
            
            // print response
            System.out.println(response.toString());
		    }catch (UnsupportedEncodingException e) {
		            e.printStackTrace();
		    } catch (ClientProtocolException e) {
		            e.printStackTrace();
		    } catch (IOException e) {
		            e.printStackTrace();
		    } catch (Exception e) {
	            e.printStackTrace();
	        }
   return response.toString();
}
	
	
	
		public static String sendSingleSMSNewADT(String url,String username, String password, String senderId, String mobileNumber, 
				String secureKey, String templateid,String Tlsversion,String hospcode,String varText)
			{
				HisDAO daoObj = null;
				WebRowSet ws = null;
				String strProcName = "{call pkg_bill_sms.proc_gblt_smstemplate_mst(?,?,?,?,?)}";
				int nProcIndex = 0;
				String strErr = "";
				String message = "";
				String smsTemplateId="";
				String responseString = "";
			    SSLSocketFactory sf=null;
				SSLContext context=null;
			    String encryptedPassword;
			    HisUtil hisUtil = null;
				try {
					hisUtil = new HisUtil("SMS", "BILLINGSMS");
					
					daoObj = new HisDAO("HisGlobal","HisUtil");
					nProcIndex = daoObj.setProcedure(strProcName);

					daoObj.setProcInValue(nProcIndex, "p_modeVal", "1",1);
					daoObj.setProcInValue(nProcIndex, "p_hospCode", hospcode,2);
					daoObj.setProcInValue(nProcIndex, "p_templatecode", templateid,3);
					daoObj.setProcOutValue(nProcIndex, "err", 1,4);
					daoObj.setProcOutValue(nProcIndex, "resultset", 2,5);

					daoObj.executeProcedureByPosition(nProcIndex);
							
					strErr = daoObj.getString(nProcIndex, "err");
							
							
					if (strErr.equals(""))
					{
						ws = daoObj.getWebRowSet(nProcIndex, "resultset");
						if (ws != null)
						{
							if (ws.next())
							{
								message=ws.getString(2);
								smsTemplateId=ws.getString(1);
							}
						}
						} else
							{
								throw new Exception(strErr);
							}
					//Custom code written by vipul on 04122021 to bypass ssl certificate starts here
					context=SSLContext.getInstance("TLSv1.2");      
				     TrustManager[] certs = new TrustManager[] { new X509TrustManager() {
				         public X509Certificate[] getAcceptedIssuers() {
				             return null;
				         }
				  
				         public void checkClientTrusted(X509Certificate[] certs, String t) {
				         }
				  
				         public void checkServerTrusted(X509Certificate[] certs, String t) {
				         }
				     } };
				     message=message.replace("{#var1#}", varText.replace("^","#").split("#")[0]);
				     message=message.replace("{#var2#}", varText.replace("^","#").split("#")[1]);
				     message=message.replace("{#var3#}", varText.replace("^","#").split("#")[2]);
				     message=message.replace("{#var4#}", hisUtil.getDSDate("")+" "+hisUtil.getDSDate("hh:mi:ss:AM"));
				    //context.init(null, null, null);
				     context.init(null, certs, new SecureRandom());
				     //Custom code written by vipul on 04122021 to bypass ssl certificate ends here   
				     sf=new SSLSocketFactory(context, SSLSocketFactory.STRICT_HOSTNAME_VERIFIER);
				     Scheme scheme=new Scheme("https",443,sf);
				     HttpClient client=new DefaultHttpClient();
				     client.getConnectionManager().getSchemeRegistry().register(scheme);
				     HttpPost post=new HttpPost("https://msdgweb.mgov.gov.in/esms/sendsmsrequestDLT");		
				     // HttpPost post=new HttpPost("https://msdgweb.mgov.gov.in/esms/sendsmsrequestDLT");
				     encryptedPassword  = MD5(password);
				     String genratedhashKey = hashGenerator(username, senderId, message, secureKey);
				     List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(1);
				     nameValuePairs.add(new BasicNameValuePair("mobileno", mobileNumber));
				     nameValuePairs.add(new BasicNameValuePair("senderid", senderId));
				     nameValuePairs.add(new BasicNameValuePair("content", message));
				     nameValuePairs.add(new BasicNameValuePair("smsservicetype", "singlemsg"));
				     nameValuePairs.add(new BasicNameValuePair("username", username));
				     nameValuePairs.add(new BasicNameValuePair("password", encryptedPassword));
				     nameValuePairs.add(new BasicNameValuePair("key", genratedhashKey));
				     nameValuePairs.add(new BasicNameValuePair("templateid", smsTemplateId));
				     post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
				     HttpResponse response=client.execute(post);
				     BufferedReader bf=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
				     String line="";
				     while((line=bf.readLine())!=null)
				     {
				     responseString = responseString+line;      
				     }
				    System.out.println(responseString);
				    } catch (NoSuchAlgorithmException e) {
	                         e.printStackTrace();
				    } catch (KeyManagementException e) {
				            e.printStackTrace();
				    } catch (UnsupportedEncodingException e) {
				            e.printStackTrace();
				    } catch (ClientProtocolException e) {
				            e.printStackTrace();
				    } catch (IOException e) {
				            e.printStackTrace();
				    } catch (Exception e) {
			            e.printStackTrace();
			        }
			
		   return responseString;
}
		
		public static String sendSingleSMSNewBILL(String url,String username, String password, String senderId, String mobileNumber, 
				String secureKey, String templateid,String Tlsversion,String hospcode,String varText)
			{
				HisDAO daoObj = null;
				WebRowSet ws = null;
				String strProcName = "{call pkg_bill_sms.proc_gblt_smstemplate_mst(?,?,?,?,?)}";
				int nProcIndex = 0;
				String strErr = "";
				String message = "";
				String smsTemplateId="";
				String responseString = "";
			    SSLSocketFactory sf=null;
				SSLContext context=null;
			    String encryptedPassword;
			    HisUtil hisUtil = null;
				try {
					hisUtil = new HisUtil("SMS", "BILLINGSMS");
					
					daoObj = new HisDAO("HisGlobal","HisUtil");
					nProcIndex = daoObj.setProcedure(strProcName);

					daoObj.setProcInValue(nProcIndex, "p_modeVal", "1",1);
					daoObj.setProcInValue(nProcIndex, "p_hospCode", hospcode,2);
					daoObj.setProcInValue(nProcIndex, "p_templatecode", templateid,3);
					daoObj.setProcOutValue(nProcIndex, "err", 1,4);
					daoObj.setProcOutValue(nProcIndex, "resultset", 2,5);

					daoObj.executeProcedureByPosition(nProcIndex);
							
					strErr = daoObj.getString(nProcIndex, "err");
							
							
					if (strErr.equals(""))
					{
						ws = daoObj.getWebRowSet(nProcIndex, "resultset");
						if (ws != null)
						{
							if (ws.next())
							{
								message=ws.getString(2);
								smsTemplateId=ws.getString(1);
							}
						}
						} else
							{
								throw new Exception(strErr);
							}
					//Custom code written by vipul on 04122021 to bypass ssl certificate starts here
					context=SSLContext.getInstance("TLSv1.2");     
				     TrustManager[] certs = new TrustManager[] { new X509TrustManager() {
				         public X509Certificate[] getAcceptedIssuers() {
				             return null;
				         }
				  
				         public void checkClientTrusted(X509Certificate[] certs, String t) {
				         }
				  
				         public void checkServerTrusted(X509Certificate[] certs, String t) {
				         }
				     } };
				     message=message.replace("{#var1#}", varText.replace("^","#").split("#")[0]);
				     message=message.replace("{#var2#}", varText.replace("^","#").split("#")[1]);
				     message=message.replace("{#var3#}", varText.replace("^","#").split("#")[2]);
				     message=message.replace("{#var4#}", hisUtil.getDSDate("")+" "+hisUtil.getDSDate("hh:mi:ss:AM"));
				    //context.init(null, null, null);
				     context.init(null, certs, new SecureRandom());
				     //Custom code written by vipul on 04122021 to bypass ssl certificate ends here   
				     sf=new SSLSocketFactory(context, SSLSocketFactory.STRICT_HOSTNAME_VERIFIER);
				     Scheme scheme=new Scheme("https",443,sf);
				     HttpClient client=new DefaultHttpClient();
				     client.getConnectionManager().getSchemeRegistry().register(scheme);
				     HttpPost post=new HttpPost("https://msdgweb.mgov.gov.in/esms/sendsmsrequestDLT");
				    // HttpPost post=new HttpPost("https://msdgweb.mgov.gov.in/esms/sendsmsrequestDLT");
				     encryptedPassword  = MD5(password);
				     String genratedhashKey = hashGenerator(username, senderId, message, secureKey);
				     List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(1);
				     nameValuePairs.add(new BasicNameValuePair("mobileno", mobileNumber));
				     nameValuePairs.add(new BasicNameValuePair("senderid", senderId));
				     nameValuePairs.add(new BasicNameValuePair("content", message));
				     nameValuePairs.add(new BasicNameValuePair("smsservicetype", "singlemsg"));
				     nameValuePairs.add(new BasicNameValuePair("username", username));
				     nameValuePairs.add(new BasicNameValuePair("password", encryptedPassword));
				     nameValuePairs.add(new BasicNameValuePair("key", genratedhashKey));
				     nameValuePairs.add(new BasicNameValuePair("templateid", smsTemplateId));
				     post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
				     HttpResponse response=client.execute(post);
				     BufferedReader bf=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
				     String line="";
				     while((line=bf.readLine())!=null)
				     {
				     responseString = responseString+line;      
				     }
				    System.out.println(responseString);
				    } catch (NoSuchAlgorithmException e) {
	                         e.printStackTrace();
				    } catch (KeyManagementException e) {
				            e.printStackTrace();
				    } catch (UnsupportedEncodingException e) {
				            e.printStackTrace();
				    } catch (ClientProtocolException e) {
				            e.printStackTrace();
				    } catch (IOException e) {
				            e.printStackTrace();
				    } catch (Exception e) {
			            e.printStackTrace();
			        }
			
		   return responseString;
}
		
		//adding ends
		
	   
	public static String sendSingleSMS(String username, String password , String message , String senderId, String mobileNumber,String secureKey){
		
		
		String responseString = "";
		SSLSocketFactory sf=null;
		SSLContext context=null;
		String encryptedPassword;
		try {
			
			//context=SSLContext.getDefault();
			context=SSLContext.getInstance("TLSv1.1");
			context.init(null, null, null);
			sf=new SSLSocketFactory(context, SSLSocketFactory.STRICT_HOSTNAME_VERIFIER);
			Scheme scheme=new Scheme("https",443,sf);
			HttpClient client=new DefaultHttpClient();
			client.getConnectionManager().getSchemeRegistry().register(scheme);
			HttpPost post=new HttpPost("https://msdgweb.mgov.gov.in/esms/sendsmsrequest");
			encryptedPassword  = MD5(password);
			message = message.trim();
			String genratedhashKey = hashGenerator(username, senderId, message, secureKey);
			List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(1);
			nameValuePairs.add(new BasicNameValuePair("mobileno", mobileNumber));
			nameValuePairs.add(new BasicNameValuePair("senderid", senderId));
			nameValuePairs.add(new BasicNameValuePair("content", message));
			nameValuePairs.add(new BasicNameValuePair("smsservicetype", "singlemsg"));
			nameValuePairs.add(new BasicNameValuePair("username", username));
			nameValuePairs.add(new BasicNameValuePair("password", encryptedPassword));
			nameValuePairs.add(new BasicNameValuePair("key", genratedhashKey));
			post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
			HttpResponse response=client.execute(post);
			BufferedReader bf=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
			String line="";
			while((line=bf.readLine())!=null){
				responseString = responseString+line;
				
			}
			System.out.println("aa"+responseString);
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (KeyManagementException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClientProtocolException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return responseString;
	}

	/**
	 * Send Bulk text SMS
	 * @param username : Department Login User Name
	 * @param password : Department Login Password
	 * @param message  : Message e.g. 'Welcome to mobile Seva'
	 * @param senderId	: Department allocated SenderID
	 * @param mobileNumber : Bulk Mobile Number with comma separated e.g. '99XXXXXXX,99XXXXXXXX' 
	 * @param secureKey :  Department key generated by login to services portal
	 * @return {@link String} response from Mobile Seva Gateway e.g. '402,MsgID = 150620161466003974245msdgsms' 
	 * @see <a href="https://mgov.gov.in/msdp_sms_push.jsp">Return types code details</a>
	 * 
	 */
	public String sendBulkSMS(String username, String password , String message , String senderId, String mobileNumber, String secureKey){
		
		String responseString = "";
		SSLSocketFactory sf=null;
		SSLContext context=null;
		String encryptedPassword;
		try {
			context=SSLContext.getInstance("TLSv1.2");
			context.init(null, null, null);
			sf=new SSLSocketFactory(context, SSLSocketFactory.STRICT_HOSTNAME_VERIFIER);
			Scheme scheme=new Scheme("https",443,sf);
			HttpClient client=new DefaultHttpClient();
			client.getConnectionManager().getSchemeRegistry().register(scheme);
			HttpPost post=new HttpPost("https://msdgweb.mgov.gov.in/esms/sendsmsrequest");
			encryptedPassword  = MD5(password);
			message = message.trim();
			String genratedhashKey = hashGenerator(username, senderId, message, secureKey);
			List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(1);
			nameValuePairs.add(new BasicNameValuePair("bulkmobno", mobileNumber));
			nameValuePairs.add(new BasicNameValuePair("senderid", senderId));
			nameValuePairs.add(new BasicNameValuePair("content", message));
			nameValuePairs.add(new BasicNameValuePair("smsservicetype", "bulkmsg"));
			nameValuePairs.add(new BasicNameValuePair("username", username));
			nameValuePairs.add(new BasicNameValuePair("password", encryptedPassword));
			nameValuePairs.add(new BasicNameValuePair("key", genratedhashKey));
			post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
			HttpResponse response=client.execute(post);
			BufferedReader bf=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
			String line="";
			while((line=bf.readLine())!=null){
				responseString = responseString+line;
				
			}
			System.out.println(responseString);
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (KeyManagementException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClientProtocolException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return responseString;		
	}
	/**
	 * Send Unicode text SMS
	 * @param username : Department Login User Name
	 * @param password : Department Login Password
	 * @param message  : Unicode Message e.g. 'ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚ÂµÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¿ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ¢â‚¬Â¢ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¾ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¸ ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â£ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¿ ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚ÂªÃƒÆ’ Ãƒâ€šÃ‚Â¥Ãƒâ€šÃ‚ï¿½ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â°ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ¢â‚¬â€�ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¤ ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¸ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ¢â‚¬â€�ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â£ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¨ ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ¢â‚¬Â¢ÃƒÆ’ Ãƒâ€šÃ‚Â¥Ãƒâ€šÃ¢â‚¬Â¡ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¦ÃƒÆ’ Ãƒâ€šÃ‚Â¥Ãƒâ€šÃ‚ï¿½ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â° ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â®ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â§ÃƒÆ’ Ãƒâ€šÃ‚Â¥Ãƒâ€šÃ‚ï¿½ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¯ÃƒÆ’ Ãƒâ€šÃ‚Â¥Ãƒâ€šÃ¢â‚¬Â¡ ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¸ÃƒÆ’ Ãƒâ€šÃ‚Â¥Ãƒâ€šÃ‚ï¿½ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚ÂµÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¾ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ¢â‚¬â€�ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¤ ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¹ÃƒÆ’ Ãƒâ€šÃ‚Â¥Ãƒâ€šÃ¢â‚¬Â¡'
	 * @param senderId	: Department allocated SenderID
	 * @param mobileNumber : Bulk Mobile Number with comma separated e.g. '99XXXXXXX,99XXXXXXXX' 
	 * @param secureKey :  Department key generated by login to services portal
	 * @return {@link String} response from Mobile Seva Gateway e.g. '402,MsgID = 150620161466003974245msdgsms' 
	 * @see <a href="https://mgov.gov.in/msdp_sms_push.jsp">Return types code details</a>
	 * 
	 */
	public String sendUnicodeSMS(String username, String password , String message , String senderId, String mobileNumber,String secureKey){
		

		String finalmessage = "";
		message = message.trim();
		for(int i = 0 ; i< message.length();i++){

			char ch = message.charAt(i);
			int j = (int) ch;
			String sss = "&#"+j+";";
			finalmessage = finalmessage+sss;
		}
	
		
		
		String responseString = "";
		SSLSocketFactory sf=null;
		SSLContext context=null;
		String encryptedPassword;
		try {
			context=SSLContext.getInstance("TLSv1.2");
			context.init(null, null, null);
			sf=new SSLSocketFactory(context, SSLSocketFactory.STRICT_HOSTNAME_VERIFIER);
			Scheme scheme=new Scheme("https",443,sf);
			HttpClient client=new DefaultHttpClient();
			client.getConnectionManager().getSchemeRegistry().register(scheme);
			HttpPost post=new HttpPost("https://msdgweb.mgov.gov.in/esms/sendsmsrequest");
			encryptedPassword  = MD5(password);
			String genratedhashKey = hashGenerator(username, senderId, finalmessage, secureKey);
			List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(1);
			nameValuePairs.add(new BasicNameValuePair("bulkmobno", mobileNumber));
			nameValuePairs.add(new BasicNameValuePair("senderid", senderId));
			nameValuePairs.add(new BasicNameValuePair("content", finalmessage));
			nameValuePairs.add(new BasicNameValuePair("smsservicetype", "unicodemsg"));
			nameValuePairs.add(new BasicNameValuePair("username", username));
			nameValuePairs.add(new BasicNameValuePair("password", encryptedPassword));
			nameValuePairs.add(new BasicNameValuePair("key", genratedhashKey));
			post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
			HttpResponse response=client.execute(post);
			BufferedReader bf=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
			String line="";
			while((line=bf.readLine())!=null){
				responseString = responseString+line;
				
			}
			System.out.println(responseString);
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (KeyManagementException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClientProtocolException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return responseString;
	}
	
	/**
	 * Send Single OTP text SMS
	 *</namevaluepair></namevaluepair></namevaluepair></namevaluepair></namevaluepair></namevaluepair></p><p> Use only in case of OTP related message</p><p>
	 * Messages other than OTP will not be delivered to the users  
	 * @param username : Department Login User Name
	 * @param password : Department Login Password
	 * @param message  : Message e.g. 'Welcome to mobile Seva'
	 * @param senderId	: Department allocated SenderID
	 * @param mobileNumber : Single Mobile Number e.g. '99XXXXXXX' 
	 * @param secureKey :  Department key generated by login to services portal
	 * @return {@link String} response from Mobile Seva Gateway e.g. '402,MsgID = 150620161466003974245msdgsms' 
	 * @see <a href="https://mgov.gov.in/msdp_sms_push.jsp">Return types code details</a>
	 * 
	 */

	public static String sendOtpSMS(String username, String password , String message , String senderId, String mobileNumber,String secureKey){
		
		String responseString = "";
		SSLSocketFactory sf=null;
		SSLContext context=null;
		String encryptedPassword;
		try {
		
			
			
              //context=SSLContext.getDefault();
			
			//System.out.println("https.protocols"+ context);
              
		//	context=SSLContext.getInstance("TLSv1");
			
			//System.setProperty("https.protocols", "SSLv3,TLSv1,TLSv1.1,TLSv1.2");
			context=SSLContext.getInstance("TLSv1.2");
			String version = System.getProperty("java.version");
		    
			System.out.println("==============java version"+version);
			context.init(null, null, null);
			sf=new SSLSocketFactory(context, SSLSocketFactory.STRICT_HOSTNAME_VERIFIER);
			Scheme scheme=new Scheme("https",443,sf);
			HttpClient client=new DefaultHttpClient();
			client.getConnectionManager().getSchemeRegistry().register(scheme);
			HttpPost post=new HttpPost("https://msdgweb.mgov.gov.in/esms/sendsmsrequest");
			encryptedPassword  = MD5(password);
			message = message.trim();
			String genratedhashKey = hashGenerator(username, senderId, message, secureKey);
			List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(1);
			nameValuePairs.add(new BasicNameValuePair("mobileno", mobileNumber));
			nameValuePairs.add(new BasicNameValuePair("senderid", senderId));
			nameValuePairs.add(new BasicNameValuePair("content", message));
			nameValuePairs.add(new BasicNameValuePair("smsservicetype", "otpmsg"));
			nameValuePairs.add(new BasicNameValuePair("username", username));
			nameValuePairs.add(new BasicNameValuePair("password", encryptedPassword));
			nameValuePairs.add(new BasicNameValuePair("key", genratedhashKey));
			post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
			HttpResponse response=client.execute(post);
			BufferedReader bf=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
			String line="";
			while((line=bf.readLine())!=null){
				responseString = responseString+line;
				
			}
			System.out.println(responseString);
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (KeyManagementException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClientProtocolException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return responseString;
		
	}
	
	/**
	 * Send Single Unicode OTP text SMS
	 * @param username : Department Login User Name
	 * @param password : Department Login Password
	 * @param message  : Unicode Message e.g. 'ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚ÂµÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¿ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ¢â‚¬Â¢ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¾ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¸ ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â£ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¿ ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚ÂªÃƒÆ’ Ãƒâ€šÃ‚Â¥Ãƒâ€šÃ‚ï¿½ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â°ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ¢â‚¬â€�ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¤ ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¸ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ¢â‚¬â€�ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â£ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¨ ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ¢â‚¬Â¢ÃƒÆ’ Ãƒâ€šÃ‚Â¥Ãƒâ€šÃ¢â‚¬Â¡ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¦ÃƒÆ’ Ãƒâ€šÃ‚Â¥Ãƒâ€šÃ‚ï¿½ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â° ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â®ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â§ÃƒÆ’ Ãƒâ€šÃ‚Â¥Ãƒâ€šÃ‚ï¿½ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¯ÃƒÆ’ Ãƒâ€šÃ‚Â¥Ãƒâ€šÃ¢â‚¬Â¡ ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¸ÃƒÆ’ Ãƒâ€šÃ‚Â¥Ãƒâ€šÃ‚ï¿½ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚ÂµÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¾ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ¢â‚¬â€�ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¤ ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’ Ãƒâ€šÃ‚Â¤Ãƒâ€šÃ‚Â¹ÃƒÆ’ Ãƒâ€šÃ‚Â¥Ãƒâ€šÃ¢â‚¬Â¡'
	 * @param senderId	: Department allocated SenderID
	 * @param mobileNumber : Bulk Mobile Number with comma separated e.g. '99XXXXXXX,99XXXXXXXX' 
	 * @param secureKey :  Department key generated by login to services portal
	 * @return {@link String} response from Mobile Seva Gateway e.g. '402,MsgID = 150620161466003974245msdgsms' 
	 * @see <a href="https://mgov.gov.in/msdp_sms_push.jsp">Return types code details</a>
	 * 
	 */
	public String sendUnicodeOtpSMS(String username, String password , String message , String senderId, String mobileNumber,String secureKey){
		
		message = message.trim();
		String finalmessage = "";
		for(int i = 0 ; i< message.length();i++){

			char ch = message.charAt(i);
			int j = (int) ch;
			String sss = "&#"+j+";";
			finalmessage = finalmessage+sss;
		}
	
	
	
		
		
		String responseString = "";
		SSLSocketFactory sf=null;
		SSLContext context=null;
		String encryptedPassword;
		try {
			context=SSLContext.getInstance("TLSv1.2");
			context.init(null, null, null);
			sf=new SSLSocketFactory(context, SSLSocketFactory.STRICT_HOSTNAME_VERIFIER);
			Scheme scheme=new Scheme("https",443,sf);
			HttpClient client=new DefaultHttpClient();
			client.getConnectionManager().getSchemeRegistry().register(scheme);
			HttpPost post=new HttpPost("https://msdgweb.mgov.gov.in/esms/sendsmsrequest");
			encryptedPassword  = MD5(password);
			String genratedhashKey = hashGenerator(username, senderId, finalmessage, secureKey);
			List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(1);
			nameValuePairs.add(new BasicNameValuePair("mobileno", mobileNumber));
			nameValuePairs.add(new BasicNameValuePair("senderid", senderId));
			nameValuePairs.add(new BasicNameValuePair("content", finalmessage));
			nameValuePairs.add(new BasicNameValuePair("smsservicetype", "unicodeotpmsg"));
			nameValuePairs.add(new BasicNameValuePair("username", username));
			nameValuePairs.add(new BasicNameValuePair("password", encryptedPassword));
			nameValuePairs.add(new BasicNameValuePair("key", genratedhashKey));
			post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
			HttpResponse response=client.execute(post);
			BufferedReader bf=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
			String line="";
			while((line=bf.readLine())!=null){
				responseString = responseString+line;
				
			}
			System.out.println(responseString);
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (KeyManagementException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClientProtocolException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return responseString;
			}
	
	protected static String hashGenerator(String userName, String senderId, String content, String secureKey) {
		// TODO Auto-generated method stub
		StringBuffer finalString=new StringBuffer();
		finalString.append(userName.trim()).append(senderId.trim()).append(content.trim()).append(secureKey.trim());
		//		logger.info("Parameters for SHA-512 : "+finalString);
		String hashGen=finalString.toString();
		StringBuffer sb = null;
		MessageDigest md;
		try {
			md = MessageDigest.getInstance("SHA-512");
			md.update(hashGen.getBytes());
			byte byteData[] = md.digest();
			//convert the byte to hex format method 1
			sb = new StringBuffer();
			for (int i = 0; i < byteData.length; i++) {
				sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
			}

		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return sb.toString();
	}

	/**
	 * Get units of the unicode message
	 * @param message e.g. 'ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¯Ãƒâ€šÃ‚Â¿Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¯Ãƒâ€šÃ‚Â¿Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â° ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â§ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¯Ãƒâ€šÃ‚Â¿Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Â ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ¢â€žÂ¢ ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ¢â‚¬â„¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ†â€™ÃƒÆ’Ã‚Â¢Ãƒâ€šÃ¢â€šÂ¬Ãƒâ€šÃ…Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ¢â‚¬Å¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡'
	 * @return int message unit
	 * **/
	public int getUnicodeTextMessageUnit(String message) {
		String charInUnicode = "";
		int msgUnit = 1;
		int msgLen = 0;
		String unicodeMessgae = "";
		String finalmessage = null;
		for(int i = 0 ; i < message.length();i++){

			char ch = message.charAt(i);
			int j = (int) ch;
			String sss = "&#"+j+";";
			finalmessage = finalmessage+sss;
		}
		StringTokenizer st = new StringTokenizer(finalmessage, " ");
		while (st.hasMoreElements()) {
			String str1 = (String) st.nextElement();
			StringTokenizer dd = new StringTokenizer(str1, ";");

			while (dd.hasMoreElements()) {
				charInUnicode = (String) dd.nextElement();
				if (charInUnicode.startsWith("&#")) {
					StringTokenizer df = new StringTokenizer(
							charInUnicode, "&#");
					while (df.hasMoreElements()) {
						String kk = (String) df.nextElement();
						unicodeMessgae = unicodeMessgae + "," + kk;
						msgLen = msgLen+1;
					}

				} else {
					if(charInUnicode.contains("&#")){
						StringTokenizer st1 = new StringTokenizer(charInUnicode, "&#");
						while (st1.hasMoreElements()) {
							String kk = (String) st1.nextElement();
							for (int i1 = 0; i1 < kk.length(); ++i1) {
								char c = kk.charAt(i1);
								int j = (int) c;
								unicodeMessgae = unicodeMessgae + "," + j;
								msgLen = msgLen+1;
							}
							String uni = st1.nextToken();
							unicodeMessgae = unicodeMessgae + "," + uni;
							msgLen = msgLen+1;
						}
					}

					else{
						for (int i1 = 0; i1 < charInUnicode.length(); ++i1) {
							char c = charInUnicode.charAt(i1);
							int j = (int) c;
							unicodeMessgae = unicodeMessgae + "," + j;
							msgLen = msgLen+1;
						}
					}
				}

			}
			unicodeMessgae = unicodeMessgae + " ";
		}

		if (msgLen > 70) {

			msgUnit = 2;

			if (msgLen > 134) {
				msgUnit = 3;

				if (msgLen > 201) {
					msgUnit = 4;
					if (msgLen > 268) {
						msgUnit = 5;
						if (msgLen > 335) {
							msgUnit = 6;
							if (msgLen > 402) {
								msgUnit = 7;
								if (msgLen> 469) {
									msgUnit = 8;
									if (msgLen > 536) {
										msgUnit = 9;
										if (msgLen > 603) {
											msgUnit = 10;

										}
									}
								}
							}
						}
					}
				}
			}


		}else{
			msgUnit = 1;
		}
		return msgUnit;
	}
	
	/**
	 * Get units of the text message
	 * @param message e.g. 'Welcome to Mobile Seva'
	 * @return int message unit
	 * **/
	public int getNormalTextMessageUnit(String message) {

		int msgUnit = 1;
		if (message.length() > 160) {
			msgUnit = 2;
			if (message.length() > 306) {
				msgUnit = 3;
			}
			if (message.length() > 459) {
				msgUnit = 4;
			}
			if (message.length() > 612) {
				msgUnit = 5;
			}
			if (message.length() > 765) {
				msgUnit = 6;
			}
			if (message.length() > 918) {
				msgUnit = 7;
			}
			if (message.length() > 1071) {
				msgUnit = 8;
			}
			if (message.length() > 1224) {
				msgUnit = 9;
			}
			if (message.length() > 1377) {
				msgUnit = 10;
			}

		}else{
			msgUnit = 1;
		}
		return msgUnit;
	}
	
	
	/****
	 * Method  to convert Normal Plain Text Password to MD5 encrypted password
	 ***/
	
	private static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException  
	{ 
		MessageDigest md;
		md = MessageDigest.getInstance("SHA-1");
		byte[] md5 = new byte[64];
		md.update(text.getBytes("iso-8859-1"), 0, text.length());
		md5 = md.digest();
		return convertedToHex(md5);
	}
	
	private static String convertedToHex(byte[] data) 
	{ 
		StringBuffer buf = new StringBuffer();

		for (int i = 0; i < data.length; i++) 
		{ 
			int halfOfByte = (data[i] >>> 4) & 0x0F;
			int twoHalfBytes = 0;

			do 
			{ 
				if ((0 <= halfOfByte) && (halfOfByte <= 9)) 
				{
					buf.append( (char) ('0' + halfOfByte) );
				}

				else 
				{
					buf.append( (char) ('a' + (halfOfByte - 10)) );
				}

				halfOfByte = data[i] & 0x0F;

			} while(twoHalfBytes++ < 1);
		} 
		return buf.toString();
	}

	public static void main(String[] args) {
        try {
            String url = "http://103.234.185.173/api/swsendnk.asp";
            URL obj = new URL(url);
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();
            
            // set request method to POST
            con.setRequestMethod("POST");
            
            // set request parameters
            String urlParameters = "username=AIIMSRBL&pass=85957886&sender=AIMSPC&sendto=9999327958&templateID=1407167480037624244&message=Dear vv, Payment of Rs. 10 received against Bill No. 11 on 22.";
            
            // send post request
            con.setDoOutput(true);
            DataOutputStream wr = new DataOutputStream(con.getOutputStream());
            wr.writeBytes(urlParameters);
            wr.flush();
            wr.close();
            
            // get response code
            int responseCode = con.getResponseCode();
            System.out.println("Response Code: " + responseCode);
            
            // get response data
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuilder response = new StringBuilder();
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();
            
            // print response
            System.out.println(response.toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
	
	public static String sendSingleSMSJDH_ORG(String myMobileNo, String oTP,String templateID)
	{
		String strErr = "";
		StringBuilder response = new StringBuilder();
		try 
		{
			String msg = oTP;
					
					
					//"Your OTP for Login is "+oTP+". This OTP is valid for 15 minutes. Regards, AIIMS";
			String content="";
			String[] messageArray = msg.split(" ");
			for (int i=0; i<messageArray.length; i++)
			{
				if(i>0)
					content+="%20";
				content+=URLEncoder.encode(messageArray[i], StandardCharsets.UTF_8.toString());
				
			}
			System.out.println(content);
			String url = "http://on.smsdekho.com/V2/http-api.php?";
			//String url = "http://on.smsdekho.com/V2/http-api-post.php";
	        URL obj = new URL(url);
	        HttpURLConnection conn = (HttpURLConnection) obj.openConnection();      
	        // set request method to POST
	        conn.setRequestMethod("POST");
	        // set request parameters
	        String urlParameters = "apikey=8TPgmGU3NRB4E8p4&senderid=AIMSJO&number="+myMobileNo+"&message="+content+"&format=json"; 
	       
	        // send post request
	        System.out.println("urlParameters: " + urlParameters);  
	        conn.setDoOutput(true);
	        DataOutputStream wr = new DataOutputStream(conn.getOutputStream());
	        wr.writeBytes(urlParameters);
	        wr.flush();
	        wr.close();        
	        // get response code
	        int responseCode = conn.getResponseCode();
	        System.out.println("Response Code: " + responseCode);       
	        // get response data
	        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
	        String inputLine;        
	        while ((inputLine = in.readLine()) != null)
	        {
	            response.append(inputLine);
	        }
	        in.close();        
	        // print response
	        System.out.println(response.toString());
		}
		catch (UnsupportedEncodingException e) 
		{
		            e.printStackTrace();
		} 
		catch (ClientProtocolException e) 
		{
		            e.printStackTrace();
		} 
		catch (IOException e)
		{
		            e.printStackTrace();
		} 
		catch (Exception e) 
		{
	            e.printStackTrace();
		}
		return response.toString();
			
	}
	
	private static String sendSingleSMSJDH(String myMobileNo, String oTP)
	{
		String strErr = "";
		StringBuilder response = new StringBuilder();
		try 
		{
			//String msg = "Your OTP for Login is "+oTP+". This OTP is valid for 15 minutes. Regards, AIIMS";
			String msg = oTP;
			String content="";
			String[] messageArray = msg.split(" ");
			for (int i=0; i<messageArray.length; i++)
			{
				if(i>0)
					content+="%20";
				content+=URLEncoder.encode(messageArray[i], StandardCharsets.UTF_8.toString());

			}
			System.out.println(content);
			String url = "http://on.smsdekho.com/V2/http-api.php?";
			URL obj = new URL(url);
			HttpURLConnection conn = (HttpURLConnection) obj.openConnection();      
			// set request method to POST
			conn.setRequestMethod("POST");
			// set request parameters
			String urlParameters = "apikey=8TPgmGU3NRB4E8p4&senderid=AIMSJO&number="+myMobileNo+"&message="+content+"&format=json";        
			// send post request
			System.out.println("urlParameters: " + urlParameters);  
			conn.setDoOutput(true);
			DataOutputStream wr = new DataOutputStream(conn.getOutputStream());
			wr.writeBytes(urlParameters);
			wr.flush();
			wr.close();        
			// get response code
			int responseCode = conn.getResponseCode();
			System.out.println("Response Code: " + responseCode);       
			// get response data
			BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
			String inputLine;        
			while ((inputLine = in.readLine()) != null)
			{
				response.append(inputLine);
			}
			in.close();        
			// print response
			System.out.println(response.toString());
		}
		catch (UnsupportedEncodingException e) 
		{
			e.printStackTrace();
		} 
		catch (ClientProtocolException e) 
		{
			e.printStackTrace();
		} 
		catch (IOException e)
		{
			e.printStackTrace();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		return response.toString();

	}

}
